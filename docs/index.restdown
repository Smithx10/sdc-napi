---
title: Networking  API (NAPI)
apisections: Networks, Nics
markdown2extras: wiki-tables, code-friendly
---


# NAPI

* Repository: git clone git@git.joyent.com:napi.git
* Browsing: <https://mo.joyent.com/napi>
* Docs: <https://mo.joyent.com/docs/napi>
* Who: Rob Gulewich
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/NAPI>

# Introduction to the Networking API

## What is NAPI?

The Networking API allows for administering the following:

* Logical Networks
* IPs
* Nics (and therefore their MAC addresses)

NAPI itself is just a directory of the above - it does not handle communicating these changes to servers, which is the domain of [ZAPI][https://mo.joyent.com/zapi] and [CNAPI][https://mo.joyent.com/cnapi].

## Getting Started

To bring up the server for development on your laptop:

    # Get the source and build.
    git clone git@git.joyent.com:napi.git
    cd napi
    make all

    # Use the sample config.
    cp config.json.sample config.json

    # Start the server
    ./bin/napi



# Networks

These endpoints manage logical networks.


## GET /networks

Returns a list of all logical networks.

### Inputs

||**Field**||**Type**||**Description**||
||name||String||Only list the network matching this name||

### Example

    GET /networks
    [
      {
        "uuid": "1275886f-3fdf-456e-bba6-28e0e2eab58f",
        "name": "admin",
        "vlan": 0,
        "network": "10.99.99.0",
        "netmask": "255.255.255.0",
        "start_ip": "10.99.99.189",
        "end_ip": "10.99.99.250",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ],
        "gateway": "10.99.99.7"
      },
      {
        "uuid": "c9306c59-f0d6-4aa0-aa0c-17d22a6a3f0f",
        "name": "external",
        "vlan": 0,
        "network": "10.88.88.0",
        "netmask": "255.255.255.0",
        "start_ip": "10.88.88.189",
        "end_ip": "10.88.88.250",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ],
        "gateway": "10.88.88.2"
      }
    ]


## POST /networks/:network_uuid/nics

Creates a new nic, provisioning an IP and MAC address in the process.

### Inputs

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||

### Example

    POST /networks/1275886f-3fdf-456e-bba6-28e0e2eab58f/nics 
        -d owner_uuid=00000000-0000-0000-0000-000000000000
        -d belongs_to_uuid=a112b8aa-eb39-4f84-8257-17a705880773
        -d belongs_to_type=zone

    {
      "ip": "10.99.99.240",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "admin",
      "mac": "90:b8:d0:f3:f8:8b",
      "primary": false,
      "owner_uuid": "00000000-0000-0000-0000-000000000000",
      "belongs_to_uuid": "a112b8aa-eb39-4f84-8257-17a705880773",
      "belongs_to_type": "zone",
      "gateway": "10.99.99.7",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }

## GET /networks/:network_uuid/ips

Gets all of the IPs in use on that Logical Network.

### Example

    GET /networks/1275886f-3fdf-456e-bba6-28e0e2eab58f/ips

    {
      "reserved": {
        "174285787": {
          "nic": 159123447941108,
          "owner_uuid": "00000000-0000-0000-0000-000000000000",
          "belongs_to_uuid": "00000000-0000-0000-0000-000000000000",
          "belongs_to_type": "zone"
        },
        "174285808": {
          "nic": 159123454032011,
          "owner_uuid": "00000000-0000-0000-0000-000000000000",
          "belongs_to_uuid": "a112b8aa-eb39-4f84-8257-17a705880773",
          "belongs_to_type": "zone"
        }
      }
    }



# Nics

These endpoints manage nics.


## GET /nics

Returns a list of all nics.

### Inputs

All inputs are optional filters on the list of nics. A nic is output in the list
if it matches *all* of the input parameters.

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||

### Example

    GET /nics

    [
      {
        "ip": "10.88.88.190",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "external",
        "mac": "90:b8:d0:b6:a2:86",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "27391a96-9fb5-4896-975a-85f948d9c509",
        "belongs_to_type": "zone",
        "gateway": "10.88.88.2",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ]
      },
      {
        "ip": "10.88.88.220",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "external",
        "mac": "90:b8:d0:bb:28:8b",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "27391a96-9fb5-4896-975a-85f948d9c509",
        "belongs_to_type": "zone",
        "gateway": "10.88.88.2",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ]
      },
      ...
    ]


## POST /nics

Creates a new nic.

||**Field**||**Type**||**Description**||
||mac||String||MAC address||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||ip||String||IP address to assign to the nic||
||gateway||String||Gateway IP address (required if IP specified)||
||netmask||String||Netmask (required if IP specified)||
||nic_tag||String||Nic tag (required if IP specified)||
||vlan_id||Number||VLAN ID (required if IP specified)||


### Example

    POST /nics
        -d mac=00:50:56:34:60:4c
        -d owner_uuid=00000000-0000-0000-0000-000000000000
        -d belongs_to_uuid=564da1dd-cea7-9cc6-1059-cca75970c802
        -d belongs_to_type=server
    {
      "mac": "00:50:56:34:60:4c",
      "primary": false,
      "owner_uuid": "00000000-0000-0000-0000-000000000000",
      "belongs_to_uuid": "564da1dd-cea7-9cc6-1059-cca75970c802",
      "belongs_to_type": "server"
    }


## GET /nics/:mac_address

Returns the nic with the given MAC address.

**Note: this is the MAC address with all colons removed.**

### Example

    GET /nics/90b8d0575370

    {
      "ip": "10.88.88.198",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "external",
      "mac": "90:b8:d0:57:53:70",
      "primary": false,
      "owner_uuid": "aaaaaaaf-bf8c-48d4-885c-6573a94b1853",
      "belongs_to_uuid": "27391a96-bbbb-bbbb-bbbb-85f948d9c509",
      "belongs_to_type": "zone",
      "gateway": "10.88.88.2",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }


## PUT /nics/:mac_address

Changes properties of the nic with the given MAC address.

**Note: this is the MAC address with all colons removed.**

### Example

    PUT /nics/90b8d0575370
        -d belongs_to_uuid=27391a96-bbbb-bbbb-bbbb-888888888888
        -d belongs_to_type=server

    {
      "ip": "10.88.88.198",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "external",
      "mac": "90:b8:d0:57:53:70",
      "primary": false,
      "owner_uuid": "aaaaaaaf-bf8c-48d4-885c-6573a94b1853",
      "belongs_to_uuid": "27391a96-bbbb-bbbb-bbbb-888888888888",
      "belongs_to_type": "server",
      "gateway": "10.88.88.2",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }

