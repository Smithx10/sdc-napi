---
title: Networking API (NAPI)
apisections: Nic Tags, Networks, Nics, Network Pools
markdown2extras: wiki-tables, code-friendly
---


# NAPI

* Repository: git clone git@git.joyent.com:napi.git
* Browsing: <https://mo.joyent.com/napi>
* Docs: <https://mo.joyent.com/docs/napi>
* Who: Rob Gulewich
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/NAPI>

# Introduction to the Networking API

## What is NAPI?

The Networking API allows for administering the following:

* Nic Tags
* Logical Networks
* Logical Network Pools
* IPs
* Nics

NAPI itself is just a directory of the above - it does not handle communicating
these changes to servers, which is the domain of
[VMAPI](https://mo.joyent.com/docs/vmapi/master) and
[CNAPI](https://mo.joyent.com/docs/cnapi/master).



# Nic Tags

These endpoints manage nic tags.


## GET /nic_tags

Returns a list of all nic tags.

### Example

    GET /nic_tags
    [
      {
        "uuid": "bc7e140a-f1fe-49fd-8b70-26379fa04492",
        "name": "admin"
      },
      {
        "uuid": "99ec3b5a-4291-4a40-ba0d-abf7ba1e6e4f",
        "name": "external"
      }
    ]


## GET /nic_tags/:name

Returns the named nic tag.

### Example

    GET /nic_tags/admin
    {
      "uuid": "bc7e140a-f1fe-49fd-8b70-26379fa04492",
      "name": "admin"
    }


## POST /nic_tags

Creates a nic tag.

### Inputs

||**Field**||**Type**||**Description**||
||name||String||nic tag name||

### Example

    POST /nic_tags
        -d name=internal
    {
      "uuid": "856e77b0-c0b2-4a6a-8c17-4ec1017360af",
      "name": "internal"
    }



# Networks

These endpoints manage logical networks.


## GET /networks

Returns a list of all logical networks.

### Inputs

All parameters are optional filters on the list. A network is output in the
list if it matches *all* of the input parameters.

||**Field**||**Type**||**Description**||
||name||String||network name||
||vlan_id||Integer||VLAN ID||
||nic_tag||String||Nic Tag name||

### Example

    GET /networks
    [
      {
        "uuid": "1275886f-3fdf-456e-bba6-28e0e2eab58f",
        "name": "admin",
        "vlan_id": 0,
        "subnet": "10.99.99.0/24",
        "netmask": "255.255.255.0",
        "provision_start_ip": "10.99.99.189",
        "provision_end_ip": "10.99.99.250",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ],
        "gateway": "10.99.99.7"
      },
      {
        "uuid": "c9306c59-f0d6-4aa0-aa0c-17d22a6a3f0f",
        "name": "external",
        "vlan_id": 128,
        "subnet": "10.88.88.0/24",
        "netmask": "255.255.255.0",
        "provision_start_ip": "10.88.88.189",
        "provision_end_ip": "10.88.88.250",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ],
        "gateway": "10.88.88.2"
      }
    ]


## POST /networks

Creates a new logical network

### Inputs

||**Field**||**Type**||**Description**||
||name||String||network name||
||vlan_id||Number||VLAN ID (0 if no VLAN ID)||
||subnet||CIDR||Subnet||
||provision_start_ip||IP||First IP address to allow provisioning on||
||provision_end_ip||IP||Last IP address to allow provisioning on||
||nic_tag||String||Name of the nic tag that this logical network is over||
||gateway||IP||Gateway IP address (Optional)||
||resolvers||Array of IPs||Resolver IP addresses (Optional)||

** Note that the provisioning range of provision_start_ip to provision_end_ip is
inclusive.**

### Example

    POST /networks
        -d name=internal
        -d vlan_id=401
        -d subnet=10.0.2.0/24
        -d provision_start_ip=10.0.2.5
        -d provision_end_ip=10.0.2.250
        -d nic_tag=internal
        -d gateway=10.0.2.1
    {
      "uuid": "dcb499bd-1caf-4ff6-8d70-4e6d5c02dff3",
      "name": "internal",
      "vlan_id": 401,
      "subnet": "10.0.2.0/24",
      "netmask": "255.255.255.0",
      "provision_start_ip": "10.0.2.5",
      "provision_end_ip": "10.0.2.250",
      "nic_tag": "internal",
      "resolvers": [],
      "gateway": "10.0.2.1"
    }


## GET /networks/:network_uuid

Gets a logical network by UUID.

### Example

    GET /networks/dcb499bd-1caf-4ff6-8d70-4e6d5c02dff3
    {
      "uuid": "dcb499bd-1caf-4ff6-8d70-4e6d5c02dff3",
      "name": "internal",
      "vlan_id": 401,
      "subnet": "10.0.2.0/24",
      "netmask": "255.255.255.0",
      "provision_start_ip": "10.0.2.5",
      "provision_end_ip": "10.0.2.250",
      "nic_tag": "internal",
      "resolvers": [],
      "gateway": "10.0.2.1"
    }


## POST /networks/:network_uuid/nics

Creates a new nic, provisioning an IP and MAC address in the process.

### Inputs

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||ip||String||IP address to assign to the nic||
||reserved||Boolean||Whether the IP address should be reserved||
||nic_tags_provided||Array of nic tag names||Nic tags this nic provides||

### Example

    POST /networks/1275886f-3fdf-456e-bba6-28e0e2eab58f/nics
        -d owner_uuid=00000000-0000-0000-0000-000000000000
        -d belongs_to_uuid=a112b8aa-eb39-4f84-8257-17a705880773
        -d belongs_to_type=zone

    {
      "ip": "10.99.99.240",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "admin",
      "mac": "90:b8:d0:f3:f8:8b",
      "primary": false,
      "owner_uuid": "00000000-0000-0000-0000-000000000000",
      "belongs_to_uuid": "a112b8aa-eb39-4f84-8257-17a705880773",
      "belongs_to_type": "zone",
      "gateway": "10.99.99.7",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }



# IPs

These endpoints manage IPs on a logical network.


## GET /networks/:network_uuid/ips

Gets all of the IPs in use on that Logical Network.

### Example

    GET /networks/1275886f-3fdf-456e-bba6-28e0e2eab58f/ips

    [
      {
        "ip": "10.99.99.9",
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "d66d8047-5c23-42a1-a26a-60ee806f7edb",
        "belongs_to_type": "zone",
        "netmask": "255.255.255.0",
        "gateway": "10.99.99.7",
        "nic": "c2:df:ef:11:48:48"
      },
      {
        "ip": "10.99.99.10",
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "671819b2-5017-4337-8c85-e5658e632955",
        "belongs_to_type": "zone",
        "netmask": "255.255.255.0",
        "gateway": "10.99.99.7",
        "nic": "c2:e0:04:1e:c7:8a"
      }
    ]



## GET /networks/:network_uuid/ips/:ip_address

Gets a specific IP on a Logical Network.

### Example

    GET /networks/b330e2a1-6260-41a8-8567-a8a011f202f1/ips/10.88.88.106

    {
      "ip": "10.88.88.106",
      "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
      "belongs_to_uuid": "0e56fe34-39a3-42d5-86c7-d719487f892b",
      "belongs_to_type": "zone",
      "netmask": "255.255.255.0",
      "gateway": "10.88.88.2",
      "nic": "90:b8:d0:55:57:2f"
    }


## PUT /networks/:network_uuid/ips/:ip_address

Modifies a specific IP on a Logical Network.

### Inputs

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||IP Owner||
||belongs_to_uuid||UUID||The UUID of what this IP belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||reserved||Boolean||Whether the IP address should be reserved||
||unassign||Boolean||When set, removes belongs_to_uuid and belongs_to_type, ignoring all other parameters in the request||

### Reserved IPs

Reserving an IP removes an IP address from the provisioning pool, which means
that IPs [provisioned on that network](#POST-/networks/:network_uuid/nics)
will not get that address.  Note that you can still provision a nic with this
IP address, but you must specify the IP when provisioning.

In addition, when you [delete a nic](#DELETE-/nics/:mac_address) with a
reserved IP, the IP **keeps its owner_uuid**, but its belongs_to_uuid and
belongs_to_type are removed (similar to the *unassign* option above).


### Example: reserving an IP

    PUT /networks/91daaada-4c62-4b80-9de8-0bd09895f86e/ips/10.99.99.77
        reserved=true

    {
      "ip": "10.99.99.77",
      "reserved": true,
      "free": false
    }



# Nics

These endpoints manage nics.


## GET /nics

Returns a list of all nics.

### Inputs

All parameters are optional filters on the list. A nic is output in the list
if it matches *all* of the input parameters.

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||nic_tag||String||The nic tag that this nic is on||

Note: all filter fields above can have multiple comma-separated values to search
on (like a logical OR).

### Example: list all nics

    GET /nics

    [
      {
        "ip": "10.88.88.190",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "external",
        "mac": "90:b8:d0:b6:a2:86",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "27391a96-9fb5-4896-975a-85f948d9c509",
        "belongs_to_type": "zone",
        "gateway": "10.88.88.2",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ]
      },
      {
        "ip": "10.88.88.220",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "external",
        "mac": "90:b8:d0:bb:28:8b",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "27391a96-9fb5-4896-975a-85f948d9c509",
        "belongs_to_type": "zone",
        "gateway": "10.88.88.2",
        "resolvers": [
          "8.8.4.4",
          "8.8.8.8"
        ]
      },
      ...
    ]


### Example: list all nics with a nic tag of external or admin

    GET /nics
      -d nic_tag=external,admin

    [
      {
        "mac": "c2:e0:09:bb:a5:3b",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "0e56fe34-39a3-42d5-86c7-d719487f892b",
        "belongs_to_type": "zone",
        "ip": "10.99.99.19",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "admin",
        "gateway": "10.99.99.7",
        "resolvers": [
          "8.8.8.8",
          "8.8.4.4"
        ]
      },
      {
        "mac": "90:b8:d0:b0:e6:d0",
        "primary": false,
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "belongs_to_uuid": "7896fd2d-0b6b-4e96-9e92-c3c7247bfe71",
        "belongs_to_type": "zone",
        "ip": "10.88.88.120",
        "netmask": "255.255.255.0",
        "vlan_id": 0,
        "nic_tag": "external",
        "gateway": "10.88.88.2",
        "resolvers": [
          "8.8.8.8",
          "8.8.4.4"
        ]
      },
      ...
    ]


## POST /nics

Creates a new nic.

||**Field**||**Type**||**Description**||
||mac||String||MAC address||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||ip||String||IP address to assign to the nic||
||network_uuid||UUID||UUID of the network or network pool to provision an IP on||
||nic_tag||String||Nic tag (required if IP specified)||
||vlan_id||Number||VLAN ID (required if IP specified)||
||reserved||Boolean||Whether the IP address should be reserved||
||nic_tags_provided||Array of nic tag names||Nic tags this nic provides||
||model||String||Nic model for KVM VMs (optional for other VM types)||


### Example

    POST /nics
        -d mac=00:50:56:34:60:4c
        -d owner_uuid=00000000-0000-0000-0000-000000000000
        -d belongs_to_uuid=564da1dd-cea7-9cc6-1059-cca75970c802
        -d belongs_to_type=server
    {
      "mac": "00:50:56:34:60:4c",
      "primary": false,
      "owner_uuid": "00000000-0000-0000-0000-000000000000",
      "belongs_to_uuid": "564da1dd-cea7-9cc6-1059-cca75970c802",
      "belongs_to_type": "server"
    }


## GET /nics/:mac_address

Returns the nic with the given MAC address.

**Note: this is the MAC address with all colons removed.**

### Example

    GET /nics/90b8d0575370

    {
      "ip": "10.88.88.198",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "external",
      "mac": "90:b8:d0:57:53:70",
      "primary": false,
      "owner_uuid": "aaaaaaaf-bf8c-48d4-885c-6573a94b1853",
      "belongs_to_uuid": "27391a96-bbbb-bbbb-bbbb-85f948d9c509",
      "belongs_to_type": "zone",
      "gateway": "10.88.88.2",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }


## PUT /nics/:mac_address

Changes properties of the nic with the given MAC address.

||**Field**||**Type**||**Description**||
||owner_uuid||UUID||Nic Owner||
||belongs_to_uuid||UUID||The UUID of what this Nic belongs to||
||belongs_to_type||String||The type that this belongs to (eg: 'zone', 'server')||
||ip||String||IP address to assign to the nic||
||network_uuid||UUID||The network UUID the nic's IP should be on||
||nic_tags_provided||Array of nic tag names||Nic tags this nic provides||
||model||String||Nic model for KVM VMs (optional for other VM types)||


**Note: this is the MAC address with all colons removed.**

### Example

    PUT /nics/90b8d0575370
        -d belongs_to_uuid=27391a96-bbbb-bbbb-bbbb-888888888888
        -d belongs_to_type=server

    {
      "ip": "10.88.88.198",
      "netmask": "255.255.255.0",
      "vlan_id": 0,
      "nic_tag": "external",
      "mac": "90:b8:d0:57:53:70",
      "primary": false,
      "owner_uuid": "aaaaaaaf-bf8c-48d4-885c-6573a94b1853",
      "belongs_to_uuid": "27391a96-bbbb-bbbb-bbbb-888888888888",
      "belongs_to_type": "server",
      "gateway": "10.88.88.2",
      "resolvers": [
        "8.8.4.4",
        "8.8.8.8"
      ]
    }


## DELETE /nics/:mac_address

Deletes the nic with the given MAC address, freeing any IPs that belong to
that nic in the process. If the IP address is reserved, its reserved and
owner_uuid properties will be preserved.

**Note: this is the MAC address with all colons removed.**

### Example

    DELETE /nics/90b8d0575370

    {}


# Network Pools

These endpoints manage logical network provisioning pools.  These are
collections of logical networks that can be used when
[provisioning a nic](#POST-/nics). The ordering of the networks property
of a pool is significant: NAPI will go try to provision an IP on each network
in this list in succession, until it succeeds or runs out of networks.


## GET /network_pools

Returns a list of all logical network pools.

### Example

    GET /network_pools
    [
      {
        "uuid": "3b5913ec-42e6-4803-9c0b-c9b1c5603520",
        "name": "internal",
        "networks": [
          "0e70de36-a40b-4ac0-9429-819f5ff822bd",
          "9f2eada0-529b-4673-a377-c249f9240a12"
        ]
      },
      {
        "uuid": "e967a42b-312d-490c-b753-c4768d9f2091",
        "name": "external",
        "networks": [
          "57a83e2b-527c-41c1-983c-be9b792011dc",
          "8ba8a35f-3eb3-496b-8103-8238eb40f9d0"
        ]
      }
    ]


## POST /network_pools

Creates a new logical network provisioning pool.

### Inputs

||**Field**||**Type**||**Description**||
||name||String||network provisioning pool name||
||networks||Array of UUIDs||Logical Network UUIDs||

### Example

    POST /network_pools
        name=internal
        networks=0e70de36-a40b-4ac0-9429-819f5ff822bd,9f2eada0-529b-4673-a377-c249f9240a12
    {
      "uuid": "3b5913ec-42e6-4803-9c0b-c9b1c5603520",
      "name": "internal",
      "networks": [
        "0e70de36-a40b-4ac0-9429-819f5ff822bd",
        "9f2eada0-529b-4673-a377-c249f9240a12"
      ]
    }


## GET /network_pools/:uuid

Gets a logical network provisioning pool by UUID.

### Example

    GET /network_pools/3b5913ec-42e6-4803-9c0b-c9b1c5603520
    {
      "uuid": "3b5913ec-42e6-4803-9c0b-c9b1c5603520",
      "name": "internal",
      "networks": [
        "0e70de36-a40b-4ac0-9429-819f5ff822bd",
        "9f2eada0-529b-4673-a377-c249f9240a12"
      ]
    }


## PUT /network_pools/:uuid

Changes a logical network provisioning pool.

### Inputs

Must specify at least one of:

||**Field**||**Type**||**Description**||
||name||String||network provisioning pool name||
||networks||Array of UUIDs||Logical Network UUIDs||

### Example

    PUT /network_pools/3b5913ec-42e6-4803-9c0b-c9b1c5603520
        name=internal2
    {
      "uuid": "3b5913ec-42e6-4803-9c0b-c9b1c5603520",
      "name": "internal2",
      "networks": [
        "0e70de36-a40b-4ac0-9429-819f5ff822bd",
        "9f2eada0-529b-4673-a377-c249f9240a12"
      ]
    }



# Changelog

## 2012-07-04

  * Can now pass reserved to POST /nics and POST /networks/:network_uuid/nics
  * Can now do a PUT /networks/:network_uuid/ips/:ip_addr to change the IP's
    reserved property

## 2012-08-20

  * gateway and netmask no longer required when POSTING to /nics with an IP
    address
  * Adding and updating nics now takes an optional nic_tags_provided parameter

## 2012-09-12

  * GET /networks: added vlan_id and nic_tag filters

## 2013-02-07

  * Added network pool endpoints
